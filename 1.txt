Sorry, the details in the correct format are as follow:

1. On the Prerequisite for Access: The attacker does not need prior access to the Azure DevOps project. The attack can be triggered by submitting a Pull Request to a connected source repository, such as a public GitHub project, that is configured to trigger an Azure DevOps pipeline. The pipeline is then exploited when a standard build step, like npm install, executes a malicious script (e.g., a preinstall.js hook) introduced via the PR. This significantly widens the attack surface, as it could potentially be exploited by any user able to submit a PR. 

2. On Token Extraction Being "By Design": I understand that accessing $(System.AccessToken) is by design when it is explicitly referenced in the pipeline configuration file[1]. This requirement to modify the pipeline.yml is, in itself, a security control. However, the attack I submitted bypasses this prerequisite entirely. My method acquires the System.AccessToken by analyzing the agent process's memory without making any modifications to the pipeline configuration file. This effectively circumvents the core security design documented. 

3. On Third-Party Connection Credentials (e.g., GitHub): The documentation mentions a security feature to not persist credentials for third-party connections in the environment[2]. This is often configured in the pipeline's checkout step using the option persistCredentials: false, which is enabled by default for non-Microsoft repositories. However, my proof-of-concept demonstrates that the credential can still be extracted at runtime even when this option is active. This renders the intended security control ineffective and negates its purpose. 